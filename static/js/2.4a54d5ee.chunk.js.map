{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Messages.jsx","components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","dialogsItems","dialog","active","messages","message","dialogs","DialogItem","props","path","id","react_default","a","createElement","className","s","src","react_router_dom","to","name","Message","React","createRef","maxLength","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","Dialogs","state","dialogsPage","messagesElements","map","m","Messages","key","dialogsElements","d","Dialogs_DialogItem_DialogItem","isAuth","values","sendMessage","newMessageBody","react_router","mapStateToPropsForRedirect","auth","compose","connect","dispatch","sendMessageCreator","Component","RedirectComponent","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","value"],"mappings":"6EACAA,EAAAC,QAAA,CAAkBC,aAAA,8BAAAC,OAAA,wBAAAC,OAAA,wBAAAC,SAAA,0BAAAC,QAAA,+CCAlBN,EAAAC,QAAA,CAAkBM,QAAA,+ICuBHC,EAlBI,SAACC,GAEhB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAET,SAClBK,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKG,IAAI,uGAETL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAASC,GAAIT,GAAOD,EAAMW,SCQnBC,EAhBC,SAACZ,GAEHa,IAAMC,YAMhB,OAEIX,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEb,QAASM,EAAMJ,oDCPnCmB,EAAYC,YAAiB,IAgE7BC,EAAsBC,YAAU,CAClCC,KAAM,wBADkBD,CArBL,SAAClB,GACpB,OACAG,EAAAC,EAAAC,cAAA,QAAMe,SAAUpB,EAAMqB,cAEnBlB,EAAAC,EAAAC,cAAA,WACKF,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAOC,UAAWC,IAAUC,YAAY,qBACvCd,KAAK,iBAAiBe,SAAU,CAACC,IAAUZ,MAEjDZ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,0BAgBIuB,EAlEC,SAAC5B,GAEb,IAAI6B,EAAQ7B,EAAM8B,YAEdC,EAAmBF,EAAMjC,SAASoC,IAAI,SAAAC,GAAC,OAAI9B,EAAAC,EAAAC,cAAE6B,EAAF,CAAUtC,SAAUqC,EAAEpC,QAASsC,IAAKF,EAAE/B,OAEjFkC,EAAkBP,EAAM/B,QAAQkC,IAAI,SAAAK,GAAC,OAAIlC,EAAAC,EAAAC,cAACiC,EAAD,CAAY3B,KAAM0B,EAAE1B,KAAMwB,IAAKE,EAAEnC,GAAIA,GAAImC,EAAEnC,OAOxF,OAAKF,EAAMuC,OAGPpC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAET,SACdK,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEd,cAEb2C,GAMLjC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEX,UACdO,EAAAC,EAAAC,cAAA,WAAM0B,GAON5B,EAAAC,EAAAC,cAACY,EAAD,CAAqBG,SAzBb,SAACoB,GACjBxC,EAAMyC,YAAYD,EAAOE,qBAIFvC,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAUjC,GAAI,4DClBzCkC,EAA6B,SAACf,GAC9B,MAAO,CAEHU,OAAQV,EAAMgB,KAAKN,gBCiEZO,4BACXC,YA1CkB,SAAClB,GACnB,MAAO,CACHC,YAAaD,EAAMC,cAIH,SAACkB,GACrB,MAAO,CACHP,YAAa,SAACC,GACVM,EAAUC,YAAmBP,QD7BT,SAACQ,GAAc,IACrCC,EADqC,SAAAC,GAAA,SAAAD,IAAA,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAF,EAAAC,GAAAC,OAAAQ,EAAA,EAAAR,CAAAF,EAAA,EAAAhB,IAAA,SAAA2B,MAAA,WAI/B,OAAKP,KAAKvD,MAAMuC,OACTpC,EAAAC,EAAAC,cAAC6C,EAAcK,KAAKvD,OADMG,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAUjC,GAAI,eAJhByC,EAAA,CACXtC,IAAMqC,WAUtC,OADqCH,YAAQH,EAARG,CAAqCI,ICmD/DL,CAGZlB","file":"static/js/2.4a54d5ee.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsItems\":\"Dialogs_dialogsItems__2hay_\",\"dialog\":\"Dialogs_dialog__2C43R\",\"active\":\"Dialogs_active__3yCfR\",\"messages\":\"Dialogs_messages__15fhq\",\"message\":\"Dialogs_message__pbABP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"DialogItem_dialogs__2qbWY\"};","import React from 'react'\r\nimport s from './DialogItem.module.css'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\n    ;\r\n\r\nconst DialogItem = (props) => {\r\n\r\n    let path = '/dialogs/' + props.id\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n        <div>\r\n        <img src='https://womenstalk.ru/wp-content/uploads/fhairs/2017/06/modnyye-korotkiye-muzhskiye-strizhki-1.jpg' />\r\n       \r\n        <NavLink to={path}>{props.name}</NavLink>\r\n        </div>     \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default DialogItem;","import React from 'react'\r\nimport s from './../Dialogs.module.css'\r\n\r\n\r\n\r\n\r\n\r\nconst Message = (props) => {\r\n\r\nlet message = React.createRef()\r\n\r\nlet addMessages = () => {\r\n    let text = message.current.value;\r\n    alert(text)\r\n}\r\n    return (\r\n        \r\n        <div className={s.dialog}>{props.messages}</div>    \r\n\r\n    )\r\n} \r\n\r\n\r\nexport default Message;","import React from 'react'\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Messages';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { Textarea } from '../common/Preloader/FormsControls/FormsControls';\r\nimport { maxLengthCreator, required } from '../../utils/validdator/validators';\r\n\r\n\r\nconst maxLength = maxLengthCreator(10)\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let messagesElements = state.messages.map(m => < Message messages={m.message} key={m.id} />)\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id} />)\r\n\r\n    let addNewMessage = (values) => {\r\n        props.sendMessage(values.newMessageBody)\r\n\r\n    }\r\n\r\n    if (!props.isAuth ) return <Redirect to={\"/login\"} />\r\n    \r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n\r\n                {dialogsElements}\r\n                {/* <DialogItems name={ dialogs[0].name} id={dialogs[0].id} /> \r\n                <DialogItems name={dialogs[1].name} id={dialogs[1].id} />  */}\r\n                \r\n\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                {/* <div><textarea value={onNewMessageBody}\r\n                                onChange={onSendMessageChange}\r\n\r\n                                placeholder='Enter your message'></textarea></div>\r\n                \r\n                <div> <button onClick={ onSendMessageClick }>Send </button></div> */}\r\n                <AddMessageFormRedux onSubmit={addNewMessage} /> \r\n            </div>\r\n        </div>\r\n\r\n\r\n\r\n    )\r\n}\r\nconst AddMessageForm = (props) => {\r\n    return(\r\n    <form onSubmit={props.handleSubmit}>\r\n       \r\n       <div>\r\n            <Field component={Textarea} placeholder=\"Enter your message\"\r\n             name=\"newMessageBody\" validate={[required, maxLength ]} />\r\n       </div>\r\n       <div>\r\n           <button >Sent</button>\r\n       </div>\r\n        {/* <div><textarea value={onNewMessageBody} Было до этого \r\n            onChange={onSendMessageChange}\r\n\r\n            placeholder='Enter your message'></textarea></div>\r\n\r\n        <div> <button onClick={onSendMessageClick}>Send </button></div> */}\r\n    </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm({\r\n    form: \"dialogAddMessageForm\"\r\n}) (AddMessageForm)\r\n\r\nexport default Dialogs;","\r\nimport React from 'react'\r\nimport { Component } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\n\r\n\r\nlet mapStateToPropsForRedirect = (state)=> {\r\n    return {\r\n        \r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            \r\n                if (!this.props.isAuth  ) return <Redirect to={\"/login\"}/>\r\n                return <Component {...this.props} />\r\n             \r\n        }\r\n    }\r\n   \r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect) (RedirectComponent)\r\n    return ConnectedAuthRedirectComponent\r\n}\r\n","import React from 'react'\r\nimport {  sendMessageCreator } from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs'\r\nimport { connect } from 'react-redux';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\n\r\n//const DialogsContainer = () => {\r\n\r\n    // return ( \r\n    //     <StoreContext.Consumer> \r\n    //     { (store) => {\r\n    //         let state =store.getState().dialogsPage;\r\n\r\n    //         let onSendMessageClick =()=> {\r\n    //            store.dispatch( sendMessageCreator())\r\n    //         } \r\n    //         let onSendMessageChange =(body)=> {\r\n                \r\n    //             store.dispatch(updateNewMessageBodyCreator(body));\r\n    //         } \r\n    //         return <Dialogs\r\n    //      updateNewMessageBody={onSendMessageChange } \r\n    //         sendMessage={onSendMessageClick}\r\n    //         dialogsPage={state} />\r\n    //         }        \r\n    //     }       \r\n    //      </StoreContext.Consumer>\r\n        \r\n    // )\r\n\r\n\r\n\r\nlet mapStateToProps = (state)=> {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n       \r\n    }\r\n}\r\nlet mapDispatchToProps =(dispatch)=> {\r\n    return {\r\n        sendMessage: (newMessageBody)=> { \r\n            dispatch( sendMessageCreator(newMessageBody))\r\n        }\r\n        ,\r\n\r\n        // updateNewMessageBody: (body)=> {  \r\n        //     dispatch(updateNewMessageBodyCreator(body));\r\n        // }\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n// let mapStateToPropsForRedirect = (state)=> {\r\n//     return {\r\n        \r\n//         isAuth: state.auth.isAuth\r\n//     }\r\n// }\r\n// AuthRedirectComponent = connect(mapStateToPropsForRedirect) (AuthRedirectComponent)\r\n\r\n\r\n// let AuthRedirectComponent = (props) => {\r\n//     if (!this.props.isAuth  ) return <Redirect to={\"/login\"}/>\r\n//     return <Dialogs {...props} />\r\n//   }\r\n\r\n////////изменели все в функцию compose()\r\n/////////let AuthRedirectComponent = withAuthRedirect(Dialogs) \r\n///////////const  DialogsContainer = connect(mapStateToProps,mapDispatchToProps) (AuthRedirectComponent) ; \r\n\r\nexport default compose(\r\n    connect(mapStateToProps,mapDispatchToProps),\r\n    withAuthRedirect\r\n) (Dialogs)\r\n\r\n//export  DialogsContainer;\r\n"],"sourceRoot":""}